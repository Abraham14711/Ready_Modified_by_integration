kernel void rd_compute(global float4 *integral_a,global float4 *integral_b,global float4 *integral_c,global float4 *integral_d,global float4 *a_in,global float4 *b_in,global float4 *c_in,global float4 *d_in,global float4 *a_out,global float4 *b_out,global float4 *c_out,global float4 *d_out)
{
    // parameters:
    const float4 aa = 0.09000000f;
    const float4 ba = -0.12000000f;
    const float4 ca = 0.00000000f;
    const float4 da = 0.03000000f;
    const float4 diff_a = 0.02000000f;
    const float4 ab = 0.15000001f;
    const float4 bb = 0.00000000f;
    const float4 cb = -0.15000001f;
    const float4 db = 0.08000000f;
    const float4 diff_b = 0.50000000f;
    const float4 timestep = 0.10000000f;
    const float4 Fmax = 0.20000000f;
    const float4 Gmax = 0.50000000f;
    const float4 dx = 1.0f; // grid spacing

    // indices:
    const int index_x = get_global_id(0);
    const int index_y = get_global_id(1);
    const int index_z = get_global_id(2);
    const int X = get_global_size(0);
    const int Y = get_global_size(1);
    const int Z = get_global_size(2);
    const int index_here = X*(Y*index_z + index_y) + index_x;
    float4 a = a_in[index_here];
    float4 b = b_in[index_here];
    float4 c = c_in[index_here];
    float4 d = d_in[index_here];

    // cells needed:
    const float4 a_dsw4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 b_dsw4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 d_dsw4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 a_sw4 = a_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 b_sw4 = b_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 d_sw4 = d_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 a_usw4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 b_usw4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 d_usw4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x-1))];
    const float4 a_dw4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 b_dw4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 d_dw4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 a_w4 = a_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x-1))];
    const float4 b_w4 = b_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x-1))];
    const float4 d_w4 = d_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x-1))];
    const float4 a_uw4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 b_uw4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 d_uw4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x-1))];
    const float4 a_dnw4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 b_dnw4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 d_dnw4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 a_nw4 = a_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 b_nw4 = b_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 d_nw4 = d_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 a_unw4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 b_unw4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 d_unw4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x-1))];
    const float4 a_ds = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 b_ds = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 d_ds = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 a_s = a_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 b_s = b_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 d_s = d_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 a_us = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 b_us = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 d_us = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + index_x];
    const float4 a_d = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + index_x];
    const float4 b_d = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + index_x];
    const float4 d_d = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + index_x];
    const float4 a_u = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + index_x];
    const float4 b_u = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + index_x];
    const float4 d_u = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + index_x];
    const float4 a_dn = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 b_dn = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 d_dn = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 a_n = a_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 b_n = b_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 d_n = d_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 a_un = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 b_un = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 d_un = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + index_x];
    const float4 a_dse4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 b_dse4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 d_dse4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 a_se4 = a_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 b_se4 = b_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 d_se4 = d_in[X* (Y * index_z + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 a_use4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 b_use4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 d_use4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y-1))) + min(X-1, max(0, index_x+1))];
    const float4 a_de4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 b_de4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 d_de4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 a_e4 = a_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x+1))];
    const float4 b_e4 = b_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x+1))];
    const float4 d_e4 = d_in[X* (Y * index_z + index_y) + min(X-1, max(0, index_x+1))];
    const float4 a_ue4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 b_ue4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 d_ue4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + index_y) + min(X-1, max(0, index_x+1))];
    const float4 a_dne4 = a_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 b_dne4 = b_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 d_dne4 = d_in[X* (Y * min(Z-1, max(0, index_z-1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 a_ne4 = a_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 b_ne4 = b_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 d_ne4 = d_in[X* (Y * index_z + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 a_une4 = a_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 b_une4 = b_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 d_une4 = d_in[X* (Y * min(Z-1, max(0, index_z+1)) + min(Y-1, max(0, index_y+1))) + min(X-1, max(0, index_x+1))];
    const float4 a_dsw = (float4)(a_dsw4.w, a_ds.xyz);
    const float4 b_dsw = (float4)(b_dsw4.w, b_ds.xyz);
    const float4 d_dsw = (float4)(d_dsw4.w, d_ds.xyz);
    const float4 a_sw = (float4)(a_sw4.w, a_s.xyz);
    const float4 b_sw = (float4)(b_sw4.w, b_s.xyz);
    const float4 d_sw = (float4)(d_sw4.w, d_s.xyz);
    const float4 a_usw = (float4)(a_usw4.w, a_us.xyz);
    const float4 b_usw = (float4)(b_usw4.w, b_us.xyz);
    const float4 d_usw = (float4)(d_usw4.w, d_us.xyz);
    const float4 a_dw = (float4)(a_dw4.w, a_d.xyz);
    const float4 b_dw = (float4)(b_dw4.w, b_d.xyz);
    const float4 d_dw = (float4)(d_dw4.w, d_d.xyz);
    const float4 a_w = (float4)(a_w4.w, a.xyz);
    const float4 b_w = (float4)(b_w4.w, b.xyz);
    const float4 d_w = (float4)(d_w4.w, d.xyz);
    const float4 a_uw = (float4)(a_uw4.w, a_u.xyz);
    const float4 b_uw = (float4)(b_uw4.w, b_u.xyz);
    const float4 d_uw = (float4)(d_uw4.w, d_u.xyz);
    const float4 a_dnw = (float4)(a_dnw4.w, a_dn.xyz);
    const float4 b_dnw = (float4)(b_dnw4.w, b_dn.xyz);
    const float4 d_dnw = (float4)(d_dnw4.w, d_dn.xyz);
    const float4 a_nw = (float4)(a_nw4.w, a_n.xyz);
    const float4 b_nw = (float4)(b_nw4.w, b_n.xyz);
    const float4 d_nw = (float4)(d_nw4.w, d_n.xyz);
    const float4 a_unw = (float4)(a_unw4.w, a_un.xyz);
    const float4 b_unw = (float4)(b_unw4.w, b_un.xyz);
    const float4 d_unw = (float4)(d_unw4.w, d_un.xyz);
    const float4 a_dse = (float4)(a_ds.yzw, a_dse4.x);
    const float4 b_dse = (float4)(b_ds.yzw, b_dse4.x);
    const float4 d_dse = (float4)(d_ds.yzw, d_dse4.x);
    const float4 a_se = (float4)(a_s.yzw, a_se4.x);
    const float4 b_se = (float4)(b_s.yzw, b_se4.x);
    const float4 d_se = (float4)(d_s.yzw, d_se4.x);
    const float4 a_use = (float4)(a_us.yzw, a_use4.x);
    const float4 b_use = (float4)(b_us.yzw, b_use4.x);
    const float4 d_use = (float4)(d_us.yzw, d_use4.x);
    const float4 a_de = (float4)(a_d.yzw, a_de4.x);
    const float4 b_de = (float4)(b_d.yzw, b_de4.x);
    const float4 d_de = (float4)(d_d.yzw, d_de4.x);
    const float4 a_e = (float4)(a.yzw, a_e4.x);
    const float4 b_e = (float4)(b.yzw, b_e4.x);
    const float4 d_e = (float4)(d.yzw, d_e4.x);
    const float4 a_ue = (float4)(a_u.yzw, a_ue4.x);
    const float4 b_ue = (float4)(b_u.yzw, b_ue4.x);
    const float4 d_ue = (float4)(d_u.yzw, d_ue4.x);
    const float4 a_dne = (float4)(a_dn.yzw, a_dne4.x);
    const float4 b_dne = (float4)(b_dn.yzw, b_dne4.x);
    const float4 d_dne = (float4)(d_dn.yzw, d_dne4.x);
    const float4 a_ne = (float4)(a_n.yzw, a_ne4.x);
    const float4 b_ne = (float4)(b_n.yzw, b_ne4.x);
    const float4 d_ne = (float4)(d_n.yzw, d_ne4.x);
    const float4 a_une = (float4)(a_un.yzw, a_une4.x);
    const float4 b_une = (float4)(b_un.yzw, b_une4.x);
    const float4 d_une = (float4)(d_un.yzw, d_une4.x);

    // keywords needed:
    const float4 laplacian_a = (-128 * a + a_dnw + a_dne + a_dsw + a_dse + a_unw + a_une + a_usw + a_use + 3 * (a_dn + a_dw + a_de + a_ds + a_nw + a_ne + a_sw + a_se + a_un + a_uw + a_ue + a_us) + 14 * (a_d + a_n + a_w + a_e + a_s + a_u)) / (30 * dx * dx);
    const float4 laplacian_b = (-128 * b + b_dnw + b_dne + b_dsw + b_dse + b_unw + b_une + b_usw + b_use + 3 * (b_dn + b_dw + b_de + b_ds + b_nw + b_ne + b_sw + b_se + b_un + b_uw + b_ue + b_us) + 14 * (b_d + b_n + b_w + b_e + b_s + b_u)) / (30 * dx * dx);
    const float4 laplacian_d = (-128 * d + d_dnw + d_dne + d_dsw + d_dse + d_unw + d_une + d_usw + d_use + 3 * (d_dn + d_dw + d_de + d_ds + d_nw + d_ne + d_sw + d_se + d_un + d_uw + d_ue + d_us) + 14 * (d_d + d_n + d_w + d_e + d_s + d_u)) / (30 * dx * dx);
    float4 delta_a = 0.0f;
    float4 delta_b = 0.0f;
    float4 delta_c = 0.0f;
    float4 delta_d = 0.0f;

    // the formula:
    delta_a = max(0,min((aa*a)*(*integral_a)*0.001+ba*b+ca,Fmax))-da*a+diff_a*laplacian_a+d;
    delta_b = max(0,min((ab*a)(*integral_a)*0.001+bb*b+cb,Gmax))-db*b+diff_b*laplacian_b;
    c =a+b;
    d = fmod(d+laplacian_d,0.5);

    // forward-Euler update step:
    a_out[index_here] = a + timestep * delta_a;
    b_out[index_here] = b + timestep * delta_b;
    c_out[index_here] = c + timestep * delta_c;
    d_out[index_here] = d + timestep * delta_d;
}
